com/google/android/aidl/BaseProxy = Google.Android.Aidl.BaseProxy
  <init>(Landroid/os/IBinder;Ljava/lang/String;)V = .ctor(Android.OS.IBinder, string)
  asBinder()Landroid/os/IBinder; = AsBinder()
  obtainAndWriteInterfaceToken()Landroid/os/Parcel; = ObtainAndWriteInterfaceToken()
  transactAndReadException(ILandroid/os/Parcel;)Landroid/os/Parcel; = TransactAndReadException(int, Android.OS.Parcel)
  transactAndReadExceptionReturnVoid(ILandroid/os/Parcel;)V = TransactAndReadExceptionReturnVoid(int, Android.OS.Parcel)
  transactOneway(ILandroid/os/Parcel;)V = TransactOneway(int, Android.OS.Parcel)
com/google/android/aidl/BaseStub = Google.Android.Aidl.BaseStub
  <init>()V = .ctor()
  asBinder()Landroid/os/IBinder; = AsBinder()
  routeToSuperOrEnforceInterface(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z = RouteToSuperOrEnforceInterface(int, Android.OS.Parcel, Android.OS.Parcel, int)
com/google/android/aidl/Codecs = Google.Android.Aidl.Codecs
  createBoolean(Landroid/os/Parcel;)Z = CreateBoolean(Android.OS.Parcel)
  createCharSequence(Landroid/os/Parcel;)Ljava/lang/CharSequence; = CreateCharSequenceFormatted(Android.OS.Parcel)
  createList(Landroid/os/Parcel;)Ljava/util/ArrayList; = CreateList(Android.OS.Parcel)
  createMap(Landroid/os/Parcel;)Ljava/util/HashMap; = CreateMap(Android.OS.Parcel)
  createParcelable(Landroid/os/Parcel;Landroid/os/Parcelable$Creator;)Landroid/os/Parcelable; = CreateParcelable(Android.OS.Parcel, Android.OS.IParcelableCreator)
  readList(Landroid/os/Parcel;Ljava/util/List;)V = ReadList(Android.OS.Parcel, System.Collections.Generic.IList<object>)
  readMap(Landroid/os/Parcel;Ljava/util/Map;)V = ReadMap(Android.OS.Parcel, System.Collections.Generic.IDictionary<object, object>)
  writeBoolean(Landroid/os/Parcel;Z)V = WriteBoolean(Android.OS.Parcel, bool)
  writeCharSequence(Landroid/os/Parcel;Ljava/lang/CharSequence;)V = WriteCharSequence(Android.OS.Parcel, Java.Lang.ICharSequence)
  writeCharSequenceAsReturnValue(Landroid/os/Parcel;Ljava/lang/CharSequence;)V = WriteCharSequenceAsReturnValue(Android.OS.Parcel, Java.Lang.ICharSequence)
  writeParcelable(Landroid/os/Parcel;Landroid/os/Parcelable;)V = WriteParcelable(Android.OS.Parcel, Android.OS.IParcelable)
  writeParcelableAsReturnValue(Landroid/os/Parcel;Landroid/os/Parcelable;)V = WriteParcelableAsReturnValue(Android.OS.Parcel, Android.OS.IParcelable)
  writeStrongBinder(Landroid/os/Parcel;Landroid/os/IInterface;)V = WriteStrongBinder(Android.OS.Parcel, Android.OS.IInterface)
com/google/android/play/core/install/model/BroadcastConstants = Com.Google.Android.Play.Core.Install.Model.BroadcastConstants
  <init>()V = .ctor()
  ACTION_INSTALL_STATUS = ActionInstallStatus
com/google/android/play/core/install/model/BundleKeys = Com.Google.Android.Play.Core.Install.Model.IBundleKeys
  KEY_ERROR_CODE = KeyErrorCode
  KEY_INSTALL_STATUS = KeyInstallStatus
  KEY_PACKAGE_NAME = KeyPackageName
  KEY_RESOLUTION_INTENT = KeyResolutionIntent
  KEY_VERSION_CODE = KeyVersionCode
com/google/android/play/core/install/model/InstallErrorCode = Com.Google.Android.Play.Core.Install.Model.IInstallErrorCode
  ERROR_API_NOT_AVAILABLE = ErrorApiNotAvailable
  ERROR_BUSY = ErrorBusy
  ERROR_DEVICE_NOT_SUPPORTED = ErrorDeviceNotSupported
  ERROR_INTERNAL_ERROR = ErrorInternalError
  ERROR_INVALID_PARAMS = ErrorInvalidParams
  ERROR_UNKNOWN = ErrorUnknown
  SUCCESS = Success
com/google/android/play/core/install/model/InstallStatus = Com.Google.Android.Play.Core.Install.Model.IInstallStatus
  CANCELED = Canceled
  DOWNLOADING = Downloading
  FAILED = Failed
  INSTALLED = Installed
  INSTALLING = Installing
  PENDING = Pending
  REQUIRES_UI_INTENT = RequiresUiIntent
  UNINSTALLED = Uninstalled
  UNINSTALL_ERROR = UninstallError
  UNINSTALLING = Uninstalling
  UNKNOWN = Unknown
com/google/android/play/core/install/protocol/IInstallService = Com.Google.Android.Play.Core.Install.Protocol.IInstallService
  requestInfo(Ljava/lang/String;Landroid/os/Bundle;Lcom/google/android/play/core/install/protocol/IInstallServiceCallback;)V = RequestInfo(string, Android.OS.Bundle, Com.Google.Android.Play.Core.Install.Protocol.IInstallServiceCallback)
  requestInstall(Ljava/lang/String;Ljava/util/List;Landroid/os/Bundle;Lcom/google/android/play/core/install/protocol/IInstallServiceCallback;)V = RequestInstall(string, System.Collections.Generic.IList<Android.OS.Bundle>, Android.OS.Bundle, Com.Google.Android.Play.Core.Install.Protocol.IInstallServiceCallback)
com/google/android/play/core/install/protocol/IInstallServiceCallback = Com.Google.Android.Play.Core.Install.Protocol.IInstallServiceCallback
  onRequestInfo(Landroid/os/Bundle;)V = OnRequestInfo(Android.OS.Bundle)
  onRequestInstall(Landroid/os/Bundle;)V = OnRequestInstall(Android.OS.Bundle)
com/google/ar/core/Anchor = Google.AR.Core.Anchor
  <init>()V = .ctor()
  getPose()Lcom/google/ar/core/Pose; = Pose
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  detach()V = Detach()
com/google/ar/core/annotations/UsedByNative = Google.AR.Core.Annotations.IUsedByNative
  value()Ljava/lang/String; = Value()
com/google/ar/core/annotations/UsedByReflection = Google.AR.Core.Annotations.IUsedByReflection
  value()Ljava/lang/String; = Value()
com/google/ar/core/ArCoreApk = Google.AR.Core.ArCoreApk
  <init>()V = .ctor()
  getInstance()Lcom/google/ar/core/ArCoreApk; = Instance
  checkAvailability(Landroid/content/Context;)Lcom/google/ar/core/ArCoreApk$Availability; = CheckAvailability(Android.Content.Context)
  requestInstall(Landroid/app/Activity;Z)Lcom/google/ar/core/ArCoreApk$InstallStatus; = RequestInstall(Android.App.Activity, bool)
  requestInstall(Landroid/app/Activity;ZLcom/google/ar/core/ArCoreApk$InstallBehavior;Lcom/google/ar/core/ArCoreApk$UserMessageType;)Lcom/google/ar/core/ArCoreApk$InstallStatus; = RequestInstall(Android.App.Activity, bool, Google.AR.Core.ArCoreApk.InstallBehavior, Google.AR.Core.ArCoreApk.UserMessageType)
com/google/ar/core/Camera = Google.AR.Core.Camera
  <init>()V = .ctor()
  getDisplayOrientedPose()Lcom/google/ar/core/Pose; = DisplayOrientedPose
  getPose()Lcom/google/ar/core/Pose; = Pose
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  getProjectionMatrix([FIFF)V = GetProjectionMatrix(float[], int, float, float)
  getViewMatrix([FI)V = GetViewMatrix(float[], int)
com/google/ar/core/Config = Google.AR.Core.Config
  <init>()V = .ctor()
  <init>(Lcom/google/ar/core/Session;)V = .ctor(Google.AR.Core.Session)
  getLightEstimationMode()Lcom/google/ar/core/Config$LightEstimationMode; = GetLightEstimationMode()
  getPlaneFindingMode()Lcom/google/ar/core/Config$PlaneFindingMode; = GetPlaneFindingMode()
  getUpdateMode()Lcom/google/ar/core/Config$UpdateMode; = GetUpdateMode()
  setLightEstimationMode(Lcom/google/ar/core/Config$LightEstimationMode;)V = SetLightEstimationMode(Google.AR.Core.Config.LightEstimationMode)
  setPlaneFindingMode(Lcom/google/ar/core/Config$PlaneFindingMode;)V = SetPlaneFindingMode(Google.AR.Core.Config.PlaneFindingMode)
  setUpdateMode(Lcom/google/ar/core/Config$UpdateMode;)V = SetUpdateMode(Google.AR.Core.Config.UpdateMode)
com/google/ar/core/exceptions/CameraNotAvailableException = Google.AR.Core.Exceptions.CameraNotAvailableException
  <init>()V = .ctor()
com/google/ar/core/exceptions/DeadlineExceededException = Google.AR.Core.Exceptions.DeadlineExceededException
  <init>()V = .ctor()
com/google/ar/core/exceptions/FatalException = Google.AR.Core.Exceptions.FatalException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
com/google/ar/core/exceptions/MissingGlContextException = Google.AR.Core.Exceptions.MissingGlContextException
  <init>()V = .ctor()
com/google/ar/core/exceptions/NotTrackingException = Google.AR.Core.Exceptions.NotTrackingException
  <init>()V = .ctor()
com/google/ar/core/exceptions/NotYetAvailableException = Google.AR.Core.Exceptions.NotYetAvailableException
  <init>()V = .ctor()
com/google/ar/core/exceptions/ResourceExhaustedException = Google.AR.Core.Exceptions.ResourceExhaustedException
  <init>()V = .ctor()
com/google/ar/core/exceptions/SessionNotPausedException = Google.AR.Core.Exceptions.SessionNotPausedException
  <init>()V = .ctor()
com/google/ar/core/exceptions/SessionPausedException = Google.AR.Core.Exceptions.SessionPausedException
  <init>()V = .ctor()
com/google/ar/core/exceptions/TextureNotSetException = Google.AR.Core.Exceptions.TextureNotSetException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableApkTooOldException = Google.AR.Core.Exceptions.UnavailableApkTooOldException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableArcoreNotInstalledException = Google.AR.Core.Exceptions.UnavailableArcoreNotInstalledException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableDeviceNotCompatibleException = Google.AR.Core.Exceptions.UnavailableDeviceNotCompatibleException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableException = Google.AR.Core.Exceptions.UnavailableException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableSdkTooOldException = Google.AR.Core.Exceptions.UnavailableSdkTooOldException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnavailableUserDeclinedInstallationException = Google.AR.Core.Exceptions.UnavailableUserDeclinedInstallationException
  <init>()V = .ctor()
com/google/ar/core/exceptions/UnsupportedConfigurationException = Google.AR.Core.Exceptions.UnsupportedConfigurationException
  <init>()V = .ctor()
com/google/ar/core/Frame = Google.AR.Core.Frame
  <init>()V = .ctor()
  getCamera()Lcom/google/ar/core/Camera; = Camera
  hasDisplayGeometryChanged()Z = HasDisplayGeometryChanged
  getImageMetadata()Lcom/google/ar/core/ImageMetadata; = ImageMetadata
  getLightEstimate()Lcom/google/ar/core/LightEstimate; = LightEstimate
  getTimestamp()J = Timestamp
  getUpdatedAnchors()Ljava/util/Collection; = UpdatedAnchors
  acquirePointCloud()Lcom/google/ar/core/PointCloud; = AcquirePointCloud()
  getUpdatedTrackables(Ljava/lang/Class;)Ljava/util/Collection; = GetUpdatedTrackables(Java.Lang.Class)
  hitTest(Landroid/view/MotionEvent;)Ljava/util/List; = HitTest(Android.Views.MotionEvent)
  hitTest(FF)Ljava/util/List; = HitTest(float, float)
  transformDisplayUvCoords(Ljava/nio/FloatBuffer;Ljava/nio/FloatBuffer;)V = TransformDisplayUvCoords(Java.Nio.FloatBuffer, Java.Nio.FloatBuffer)
com/google/ar/core/HitResult = Google.AR.Core.HitResult
  <init>()V = .ctor()
  getDistance()F = Distance
  getHitPose()Lcom/google/ar/core/Pose; = HitPose
  getTrackable()Lcom/google/ar/core/Trackable; = Trackable
  createAnchor()Lcom/google/ar/core/Anchor; = CreateAnchor()
com/google/ar/core/ImageMetadata = Google.AR.Core.ImageMetadata
  <init>()V = .ctor()
  BLACK_LEVEL_LOCK = BlackLevelLock
  COLOR_CORRECTION_ABERRATION_MODE = ColorCorrectionAberrationMode
  COLOR_CORRECTION_GAINS = ColorCorrectionGains
  COLOR_CORRECTION_MODE = ColorCorrectionMode
  COLOR_CORRECTION_TRANSFORM = ColorCorrectionTransform
  CONTROL_AE_ANTIBANDING_MODE = ControlAeAntibandingMode
  CONTROL_AE_EXPOSURE_COMPENSATION = ControlAeExposureCompensation
  CONTROL_AE_LOCK = ControlAeLock
  CONTROL_AE_MODE = ControlAeMode
  CONTROL_AE_PRECAPTURE_TRIGGER = ControlAePrecaptureTrigger
  CONTROL_AE_REGIONS = ControlAeRegions
  CONTROL_AE_STATE = ControlAeState
  CONTROL_AE_TARGET_FPS_RANGE = ControlAeTargetFpsRange
  CONTROL_AF_MODE = ControlAfMode
  CONTROL_AF_REGIONS = ControlAfRegions
  CONTROL_AF_STATE = ControlAfState
  CONTROL_AF_TRIGGER = ControlAfTrigger
  CONTROL_AWB_LOCK = ControlAwbLock
  CONTROL_AWB_MODE = ControlAwbMode
  CONTROL_AWB_REGIONS = ControlAwbRegions
  CONTROL_AWB_STATE = ControlAwbState
  CONTROL_CAPTURE_INTENT = ControlCaptureIntent
  CONTROL_EFFECT_MODE = ControlEffectMode
  CONTROL_MODE = ControlMode
  CONTROL_POST_RAW_SENSITIVITY_BOOST = ControlPostRawSensitivityBoost
  CONTROL_SCENE_MODE = ControlSceneMode
  CONTROL_VIDEO_STABILIZATION_MODE = ControlVideoStabilizationMode
  EDGE_MODE = EdgeMode
  FLASH_MODE = FlashMode
  FLASH_STATE = FlashState
  HOT_PIXEL_MODE = HotPixelMode
  JPEG_GPS_COORDINATES = JpegGpsCoordinates
  JPEG_GPS_PROCESSING_METHOD = JpegGpsProcessingMethod
  JPEG_GPS_TIMESTAMP = JpegGpsTimestamp
  JPEG_ORIENTATION = JpegOrientation
  JPEG_QUALITY = JpegQuality
  JPEG_THUMBNAIL_QUALITY = JpegThumbnailQuality
  JPEG_THUMBNAIL_SIZE = JpegThumbnailSize
  LENS_APERTURE = LensAperture
  LENS_FILTER_DENSITY = LensFilterDensity
  LENS_FOCAL_LENGTH = LensFocalLength
  LENS_FOCUS_DISTANCE = LensFocusDistance
  LENS_FOCUS_RANGE = LensFocusRange
  LENS_INTRINSIC_CALIBRATION = LensIntrinsicCalibration
  LENS_OPTICAL_STABILIZATION_MODE = LensOpticalStabilizationMode
  LENS_POSE_ROTATION = LensPoseRotation
  LENS_POSE_TRANSLATION = LensPoseTranslation
  LENS_RADIAL_DISTORTION = LensRadialDistortion
  LENS_STATE = LensState
  NOISE_REDUCTION_MODE = NoiseReductionMode
  REQUEST_PIPELINE_DEPTH = RequestPipelineDepth
  SCALER_CROP_REGION = ScalerCropRegion
  SENSOR_DYNAMIC_BLACK_LEVEL = SensorDynamicBlackLevel
  SENSOR_DYNAMIC_WHITE_LEVEL = SensorDynamicWhiteLevel
  SENSOR_EXPOSURE_TIME = SensorExposureTime
  SENSOR_FRAME_DURATION = SensorFrameDuration
  SENSOR_GREEN_SPLIT = SensorGreenSplit
  SENSOR_NEUTRAL_COLOR_POINT = SensorNeutralColorPoint
  SENSOR_NOISE_PROFILE = SensorNoiseProfile
  SENSOR_ROLLING_SHUTTER_SKEW = SensorRollingShutterSkew
  SENSOR_SENSITIVITY = SensorSensitivity
  SENSOR_TEST_PATTERN_DATA = SensorTestPatternData
  SENSOR_TEST_PATTERN_MODE = SensorTestPatternMode
  SENSOR_TIMESTAMP = SensorTimestamp
  SHADING_MODE = ShadingMode
  STATISTICS_FACE_DETECT_MODE = StatisticsFaceDetectMode
  STATISTICS_FACE_IDS = StatisticsFaceIds
  STATISTICS_FACE_LANDMARKS = StatisticsFaceLandmarks
  STATISTICS_FACE_RECTANGLES = StatisticsFaceRectangles
  STATISTICS_FACE_SCORES = StatisticsFaceScores
  STATISTICS_HOT_PIXEL_MAP = StatisticsHotPixelMap
  STATISTICS_HOT_PIXEL_MAP_MODE = StatisticsHotPixelMapMode
  STATISTICS_LENS_SHADING_MAP = StatisticsLensShadingMap
  STATISTICS_LENS_SHADING_MAP_MODE = StatisticsLensShadingMapMode
  STATISTICS_SCENE_FLICKER = StatisticsSceneFlicker
  SYNC_FRAME_NUMBER = SyncFrameNumber
  TONEMAP_CURVE_BLUE = TonemapCurveBlue
  TONEMAP_CURVE_GREEN = TonemapCurveGreen
  TONEMAP_CURVE_RED = TonemapCurveRed
  TONEMAP_GAMMA = TonemapGamma
  TONEMAP_MODE = TonemapMode
  TONEMAP_PRESET_CURVE = TonemapPresetCurve
  getByte(I)B = GetByte(int)
  getByteArray(I)[B = GetByteArray(int)
  getDouble(I)D = GetDouble(int)
  getDoubleArray(I)[D = GetDoubleArray(int)
  getFloat(I)F = GetFloat(int)
  getFloatArray(I)[F = GetFloatArray(int)
  getInt(I)I = GetInt(int)
  getIntArray(I)[I = GetIntArray(int)
  getKeys()[J = GetKeys()
  getLong(I)J = GetLong(int)
  getLongArray(I)[J = GetLongArray(int)
  getRational(I)Landroid/util/Rational; = GetRational(int)
  getRationalArray(I)[Landroid/util/Rational; = GetRationalArray(int)
com/google/ar/core/InstallActivity = Google.AR.Core.InstallActivity
  <init>()V = .ctor()
com/google/ar/core/LightEstimate = Google.AR.Core.LightEstimate
  <init>()V = .ctor()
  getPixelIntensity()F = PixelIntensity
  getState()Lcom/google/ar/core/LightEstimate$State; = GetState()
com/google/ar/core/Plane = Google.AR.Core.Plane
  <init>()V = .ctor()
  getCenterPose()Lcom/google/ar/core/Pose; = CenterPose
  getExtentX()F = ExtentX
  getExtentZ()F = ExtentZ
  getPolygon()Ljava/nio/FloatBuffer; = Polygon
  getSubsumedBy()Lcom/google/ar/core/Plane; = SubsumedBy
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  getType()Lcom/google/ar/core/Plane$Type; = GetType()
  isPoseInExtents(Lcom/google/ar/core/Pose;)Z = IsPoseInExtents(Google.AR.Core.Pose)
  isPoseInPolygon(Lcom/google/ar/core/Pose;)Z = IsPoseInPolygon(Google.AR.Core.Pose)
com/google/ar/core/Point = Google.AR.Core.Point
  <init>()V = .ctor()
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  equals(Ljava/lang/Object;)Z = Equals(Java.Lang.Object)
  hashCode()I = GetHashCode()
  getOrientationMode()Lcom/google/ar/core/Point$OrientationMode; = GetOrientationMode()
com/google/ar/core/PointCloud = Google.AR.Core.PointCloud
  <init>()V = .ctor()
  getPoints()Ljava/nio/FloatBuffer; = Points
  getTimestamp()J = Timestamp
  release()V = Release()
com/google/ar/core/Pose = Google.AR.Core.Pose
  <init>([F[F)V = .ctor(float[], float[])
  IDENTITY = Identity
  compose(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Pose; = Compose(Google.AR.Core.Pose)
  extractRotation()Lcom/google/ar/core/Pose; = ExtractRotation()
  extractTranslation()Lcom/google/ar/core/Pose; = ExtractTranslation()
  getRotationQuaternion([FI)V = GetRotationQuaternion(float[], int)
  getTransformedAxis(IF)[F = GetTransformedAxis(int, float)
  getTransformedAxis(IF[FI)V = GetTransformedAxis(int, float, float[], int)
  getTranslation([FI)V = GetTranslation(float[], int)
  getXAxis()[F = GetXAxis()
  getYAxis()[F = GetYAxis()
  getZAxis()[F = GetZAxis()
  inverse()Lcom/google/ar/core/Pose; = Inverse()
  makeInterpolated(Lcom/google/ar/core/Pose;Lcom/google/ar/core/Pose;F)Lcom/google/ar/core/Pose; = MakeInterpolated(Google.AR.Core.Pose, Google.AR.Core.Pose, float)
  makeRotation(FFFF)Lcom/google/ar/core/Pose; = MakeRotation(float, float, float, float)
  makeRotation([F)Lcom/google/ar/core/Pose; = MakeRotation(float[])
  makeTranslation(FFF)Lcom/google/ar/core/Pose; = MakeTranslation(float, float, float)
  makeTranslation([F)Lcom/google/ar/core/Pose; = MakeTranslation(float[])
  qw()F = Qw()
  qx()F = Qx()
  qy()F = Qy()
  qz()F = Qz()
  rotateVector([FI[FI)V = RotateVector(float[], int, float[], int)
  toMatrix([FI)V = ToMatrix(float[], int)
  transformPoint([F)[F = TransformPoint(float[])
  transformPoint([FI[FI)V = TransformPoint(float[], int, float[], int)
  tx()F = Tx()
  ty()F = Ty()
  tz()F = Tz()
com/google/ar/core/Session = Google.AR.Core.Session
  <init>()V = .ctor()
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getAllAnchors()Ljava/util/Collection; = AllAnchors
  configure(Lcom/google/ar/core/Config;)V = Configure(Google.AR.Core.Config)
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
  getAllTrackables(Ljava/lang/Class;)Ljava/util/Collection; = GetAllTrackables(Java.Lang.Class)
  isSupported(Lcom/google/ar/core/Config;)Z = IsSupported(Google.AR.Core.Config)
  pause()V = Pause()
  resume()V = Resume()
  setCameraTextureName(I)V = SetCameraTextureName(int)
  setDisplayGeometry(III)V = SetDisplayGeometry(int, int, int)
  update()Lcom/google/ar/core/Frame; = Update()
com/google/ar/core/Trackable = Google.AR.Core.ITrackable
  getAnchors()Ljava/util/Collection; = Anchors
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
com/google/ar/core/TrackableBase = Google.AR.Core.TrackableBase
  getAnchors()Ljava/util/Collection; = Anchors
  getTrackingState()Lcom/google/ar/core/TrackingState; = TrackingState
  createAnchor(Lcom/google/ar/core/Pose;)Lcom/google/ar/core/Anchor; = CreateAnchor(Google.AR.Core.Pose)
com/google/ar/core/TrackingState = Google.AR.Core.TrackingState
  PAUSED = Paused
  STOPPED = Stopped
  TRACKING = Tracking
  valueOf(Ljava/lang/String;)Lcom/google/ar/core/TrackingState; = ValueOf(string)
  values()[Lcom/google/ar/core/TrackingState; = Values()
com/google/vr/dynamite/client/DynamiteClient = Google.VR.Dynamite.Client.DynamiteClient
  checkVersion(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I = CheckVersion(Android.Content.Context, string, string, string)
  getRemoteClassLoader(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/ClassLoader; = GetRemoteClassLoader(Android.Content.Context, string, string)
  loadNativeRemoteLibrary(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)J = LoadNativeRemoteLibrary(Android.Content.Context, string, string)
com/google/vr/dynamite/client/DynamiteConstants = Google.VR.Dynamite.Client.DynamiteConstants
  <init>()V = .ctor()
  DYNAMITE_LOAD_RESULT_ERROR = DynamiteLoadResultError
  DYNAMITE_LOAD_RESULT_FAILED_APK_TOO_OLD = DynamiteLoadResultFailedApkTooOld
  DYNAMITE_LOAD_RESULT_FAILED_NOT_INSTALLED = DynamiteLoadResultFailedNotInstalled
  DYNAMITE_LOAD_RESULT_FAILED_SDK_TOO_OLD = DynamiteLoadResultFailedSdkTooOld
  DYNAMITE_LOAD_RESULT_OK = DynamiteLoadResultOk
com/google/vr/dynamite/client/ILoadedInstanceCreator = Google.VR.Dynamite.Client.ILoadedInstanceCreator
  newNativeLibraryLoader(Lcom/google/vr/dynamite/client/IObjectWrapper;Lcom/google/vr/dynamite/client/IObjectWrapper;)Lcom/google/vr/dynamite/client/INativeLibraryLoader; = NewNativeLibraryLoader(Google.VR.Dynamite.Client.IObjectWrapper, Google.VR.Dynamite.Client.IObjectWrapper)
com/google/vr/dynamite/client/INativeLibraryLoader = Google.VR.Dynamite.Client.INativeLibraryLoader
  checkVersion(Ljava/lang/String;)I = CheckVersion(string)
  initializeAndLoadNativeLibrary(Ljava/lang/String;)J = InitializeAndLoadNativeLibrary(string)
com/google/vr/dynamite/client/IObjectWrapper = Google.VR.Dynamite.Client.IObjectWrapper
com/google/vr/dynamite/client/LoaderException = Google.VR.Dynamite.Client.LoaderException
  <init>(I)V = .ctor(int)
  ERROR_PACKAGE_NOT_AVAILABLE = ErrorPackageNotAvailable
  ERROR_PACKAGE_OBSOLETE = ErrorPackageObsolete
  toString()Ljava/lang/String; = ToString()
com/google/vr/dynamite/client/ObjectWrapper = Google.VR.Dynamite.Client.ObjectWrapper
  unwrap(Lcom/google/vr/dynamite/client/IObjectWrapper;Ljava/lang/Class;)Ljava/lang/Object; = Unwrap(Google.VR.Dynamite.Client.IObjectWrapper, Java.Lang.Class)
  wrap(Ljava/lang/Object;)Lcom/google/vr/dynamite/client/IObjectWrapper; = Wrap(Java.Lang.Object)
com/google/vr/dynamite/client/UsedByNative = Google.VR.Dynamite.Client.IUsedByNative
  value()Ljava/lang/String; = Value()
com/google/vr/dynamite/client/UsedByReflection = Google.VR.Dynamite.Client.IUsedByReflection
  value()Ljava/lang/String; = Value()
com/google/vr/dynamite/client/Version = Google.VR.Dynamite.Client.Version
  <init>(III)V = .ctor(int, int, int)
  majorVersion = MajorVersion
  minorVersion = MinorVersion
  patchVersion = PatchVersion
  TAG = Tag
  isAtLeast(Lcom/google/vr/dynamite/client/Version;)Z = IsAtLeast(Google.VR.Dynamite.Client.Version)
  parse(Ljava/lang/String;)Lcom/google/vr/dynamite/client/Version; = Parse(string)
